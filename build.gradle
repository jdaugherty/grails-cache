buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradlePlugin"
    }
}

group "org.grails.plugins"
version project.projectVersion

apply plugin:"eclipse"
apply plugin:"idea"
apply from:"./gradle/docs.gradle"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-publish"

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    api "org.springframework.boot:spring-boot-starter-logging"
    api "org.springframework.boot:spring-boot-autoconfigure"
    api "org.grails:grails-core"
    api "org.springframework.boot:spring-boot-starter-actuator"
    api "org.springframework.boot:spring-boot-starter-tomcat"
    api "org.grails:grails-web-boot"
    api "org.grails:grails-logging"
    api "org.grails:grails-plugin-rest"
    api "org.grails:grails-plugin-databinding"
    api "org.grails:grails-plugin-i18n"
    api "org.grails:grails-plugin-services"
    api "org.grails:grails-plugin-url-mappings"
    api "org.grails:grails-plugin-interceptors"
    api "org.grails.plugins:async"
    api "org.grails.plugins:scaffolding"
    api "org.codehaus.gpars:gpars:$gparsVersion"
    api "org.grails.plugins:gsp"

    runtimeOnly "org.grails.plugins:async"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    compileOnly "org.grails:grails-plugin-services"
    compileOnly "org.grails:grails-plugin-domain-class"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.mockito:mockito-core"

    integrationTestImplementation testFixtures("org.grails.plugins:geb:5.0.0-SNAPSHOT")
    api "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:$concurrentlinkedhashmapLruVersion"
}

apply from: rootProject.file('gradle/testVerbose.gradle')

//tasks.withType(Test) {
//    systemProperty 'grails.geb.recording.mode', 'RECORD_FAILING'
//}

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

grailsPublish {
    githubSlug = project.githubSlug
    license {
        name = 'Apache-2.0'
    }
    title = project.title
    desc = project.projectDesc
    developers = [jeffbrown: "Jeff Scott Brown", "puneetbehl": "Puneet Behl"]
}

integrationTest {
    testLogging {
        exceptionFormat = 'full'
    }
}

// exclude demo code from jar artifact
jar {
    includeEmptyDirs = false
    exclude 'com/demo/**'
}

tasks.named("publishGuide") {
    it.dependsOn = ["compileAstGroovy", "copyAstClasses", "compileGroovy",
                    "compileAstJava", "compileJava", "compileAstJava",
                    "groovydoc", "processResources", "copyCommands", "copyLocalDocResources"]
}
